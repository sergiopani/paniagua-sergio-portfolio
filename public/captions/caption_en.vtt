WEBVTT
kind: captions
lang: en

1
00:00:00.720 --> 00:00:02.380
How does next actually work?

2
00:00:02.400 --> 00:00:03.700
Might sound like a silly question.

3
00:00:03.720 --> 00:00:05.180
It renders react on the server.

4
00:00:05.200 --> 00:00:06.420
What is there to know about it?

5
00:00:06.450 --> 00:00:10.780
Well, I found a lot of the questions that
I get about people building with T three

6
00:00:10.800 --> 00:00:14.700
stack and with the tech we recommend here
come from fundamental misunderstandings of

7
00:00:14.730 --> 00:00:19.140
how Next itself actually works and differs
from old ways of deploying things like

8
00:00:19.170 --> 00:00:22.940
create react app or V single
page app deployments.

9
00:00:22.970 --> 00:00:24.700
What makes next different.

10
00:00:24.730 --> 00:00:26.540
How how should we think about it?

11
00:00:26.570 --> 00:00:30.940
And how does data actually flow through
NextJS to your react application?

12
00:00:30.970 --> 00:00:33.760
Let's talk about it.

13
00:00:34.400 --> 00:00:37.980
This big old dump in the HTML here.

14
00:00:38.000 --> 00:00:41.340
This is the content of what
gets serverside props returned.

15
00:00:41.360 --> 00:00:44.740
Oh boy, am I happy you're here for this
stream and video because the whole point

16
00:00:44.770 --> 00:00:49.880
of this is that SSR is
just the first step.

17
00:00:50.200 --> 00:00:56.340
So NextJS, as we know, is a server
rendered framework for react.

18
00:00:56.370 --> 00:00:59.260
The TLDR version is you write react code

19
00:00:59.280 --> 00:01:02.020
and before it goes to the
users, it gets run on a server.

20
00:01:02.050 --> 00:01:06.850
So the user gets a page that actually
has the content of the page.

21
00:01:06.880 --> 00:01:09.180
If I go to somewhere like,

22
00:01:09.210 --> 00:01:13.180
do I have a single, like a simple
VIT app deployed somewhere?

23
00:01:13.210 --> 00:01:14.540
We did.

24
00:01:14.570 --> 00:01:17.700
So this is an app that
was built using VIT.

25
00:01:17.730 --> 00:01:21.900
Normally you put a query param for
the hours, minutes and seconds.

26
00:01:21.920 --> 00:01:23.740
I'm lazy, don't feel like doing that.

27
00:01:23.760 --> 00:01:25.540
The important detail to know here is that

28
00:01:25.570 --> 00:01:29.900
the HTML that comes down the server
does not have the contents of the page.

29
00:01:29.930 --> 00:01:33.080
So if I network tab and actually look at

30
00:01:33.110 --> 00:01:37.340
the HTML we got back from the server,
you'll see that this HTML is like

31
00:01:37.370 --> 00:01:41.380
hilariously empty, has a divid
root with nothing in it.

32
00:01:41.410 --> 00:01:43.760
The reason for this is the content of the

33
00:01:43.790 --> 00:01:46.820
page isn't created on a server,
it's created on the client.

34
00:01:46.850 --> 00:01:50.490
This page is almost instructions
for how to make the website.

35
00:01:50.520 --> 00:01:54.490
And most of those instructions
are contained within this index.

36
00:01:54.520 --> 00:01:56.460
Whatever JS file.

37
00:01:56.490 --> 00:01:59.210
This asset file is a bunch of JavaScript

38
00:01:59.240 --> 00:02:02.980
that we bundled, that we built when
things were deployed on Versaille.

39
00:02:03.010 --> 00:02:05.620
And this JavaScript gets loaded by the

40
00:02:05.650 --> 00:02:11.020
client and then runs to create
the page that the user sees.

41
00:02:11.050 --> 00:02:18.980
So the control flow here, if I open up
excalibra quick spa react flow is

42
00:02:19.010 --> 00:02:21.940
I'll draw my arrow down
the top here is request.

43
00:02:21.960 --> 00:02:23.300
The bottom is the HTML page.

44
00:02:23.330 --> 00:02:26.260
I'm too lazy to draw those in here.

45
00:02:26.290 --> 00:02:32.260
The step one is user
receives HTML with JS tag.

46
00:02:32.280 --> 00:02:34.220
Should specify that this is like empty.

47
00:02:34.250 --> 00:02:37.700
So the first steps, the user
receives empty HTML to JS tag.

48
00:02:37.730 --> 00:02:43.940
User loads JS from JS tag, JS from or JS

49
00:02:43.970 --> 00:02:48.260
runs, starts fetching
data and creating Page.

50
00:02:48.280 --> 00:02:50.220
I'm going to have to make a
longer arrow for this one.

51
00:02:50.250 --> 00:02:54.300
Eventually, data returns JS finishes

52
00:02:54.330 --> 00:02:58.780
rendering Page, and then finally
complete Page with correct HTML.

53
00:02:58.810 --> 00:03:01.700
In order to go from the user making a

54
00:03:01.730 --> 00:03:08.060
request to this generated correct page,
we have to load JS here from the HTML.

55
00:03:08.090 --> 00:03:11.420
So at this point we'll say
HTML here, but incorrect.

56
00:03:11.440 --> 00:03:13.940
So at this point the HTML is
here, but it is incorrect.

57
00:03:13.970 --> 00:03:17.180
It does not represent what
the page's content should be.

58
00:03:17.210 --> 00:03:21.660
It represents a static cached asset of
just some of the content of the page.

59
00:03:21.680 --> 00:03:23.640
And until all of these things happen, it

60
00:03:23.640 --> 00:03:25.700
is not running or it is
not the correct page.

61
00:03:25.720 --> 00:03:29.660
And it takes all the way to here to get
that correct page because the client has

62
00:03:29.690 --> 00:03:32.220
to go do another server
trip to fetch data.

63
00:03:32.250 --> 00:03:35.060
I could put a line actually for each point

64
00:03:35.090 --> 00:03:38.380
that an additional request or
set of requests has to be made.

65
00:03:38.400 --> 00:03:40.480
So request one happens at the top here and

66
00:03:40.510 --> 00:03:44.740
then they receive the HTML,
then they request the JS here.

67
00:03:44.770 --> 00:03:46.900
So this is the request
for that JavaScript.

68
00:03:46.930 --> 00:03:49.140
And then once the JS comes in and runs, it

69
00:03:49.160 --> 00:03:51.580
has to request the actual
data for the page contents.

70
00:03:51.610 --> 00:03:54.100
So the first thing you
fetch here is the HTML.

71
00:03:54.130 --> 00:04:02.540
First fetch HTML, then fetch JS, then
fetch the data you need for the page.

72
00:04:02.570 --> 00:04:04.980
And finally, then after all of these

73
00:04:05.010 --> 00:04:08.860
steps, you get a complete page
with the correct HTML out.

74
00:04:08.890 --> 00:04:10.920
So each of these you request to the

75
00:04:10.950 --> 00:04:15.100
server, you get HTML, you do some stuff,
you request the server again, you get some

76
00:04:15.130 --> 00:04:19.380
JavaScript, you do some stuff, you
request the data, that comes back again.

77
00:04:19.400 --> 00:04:21.420
And now you can actually
finish rendering the page.

78
00:04:21.450 --> 00:04:26.220
But each of those steps, it's because the
server isn't generating HTML per request.

79
00:04:26.250 --> 00:04:27.340
On this request.

80
00:04:27.360 --> 00:04:28.720
The first one, the server doesn't know

81
00:04:28.720 --> 00:04:31.500
what you want, it doesn't know
what the user is asking for.

82
00:04:31.520 --> 00:04:33.220
It's just handing them an HTML page.

83
00:04:33.250 --> 00:04:37.860
And from there the HTML page can load the
JavaScript, and then from that JavaScript

84
00:04:37.880 --> 00:04:39.980
figure out what it's
actually meant to be doing.

85
00:04:40.010 --> 00:04:42.820
But all of those steps have to occur on

86
00:04:42.840 --> 00:04:46.300
the client's device before it
can render the correct page.

87
00:04:46.330 --> 00:04:49.500
The goal of NextJS was to prevent this.

88
00:04:49.530 --> 00:04:54.820
So if I go here and say NextJS
dataflow, what NextJS does?

89
00:04:54.840 --> 00:04:57.280
And I'm going to delete all of these
lines, I'm just going to delete all of

90
00:04:57.280 --> 00:04:59.420
this because most of the
info here is incorrect.

91
00:04:59.450 --> 00:05:04.740
So user Requests Page so what happens
here when these request the page?

92
00:05:04.770 --> 00:05:06.860
Depends on how you have things set up in

93
00:05:06.890 --> 00:05:10.300
NextJS, but we'll assume you're
server rendering every page.

94
00:05:10.320 --> 00:05:11.940
For now we'll go into what that means and

95
00:05:11.960 --> 00:05:14.020
why you might not want
to do that in a minute.

96
00:05:14.040 --> 00:05:17.380
But for now we'll say Next server.

97
00:05:17.410 --> 00:05:23.020
We'll say Gets request runs
gets server side Props.

98
00:05:23.040 --> 00:05:25.420
The Getserverside Props function is server

99
00:05:25.450 --> 00:05:28.220
code that runs when a
user requests the page.

100
00:05:28.250 --> 00:05:30.500
So if I request a page like, let's say I'm

101
00:05:30.530 --> 00:05:35.620
requesting, I'll just change
it the User requests usertheo.

102
00:05:35.650 --> 00:05:40.980
So user request usertheo Nextserver gets
the request and it runs the Getserverside

103
00:05:41.010 --> 00:05:46.700
Props function that is in that page file
that gets server side props function

104
00:05:46.730 --> 00:05:51.300
probably is taking a user ID from the
query param, in this case the slash theo.

105
00:05:51.330 --> 00:05:53.380
It is running that against something like

106
00:05:53.410 --> 00:05:58.740
a database to fetch some data and then it
returns that as props for that page

107
00:05:58.770 --> 00:06:02.700
specifically so it can
render that into the HTML.

108
00:06:02.730 --> 00:06:06.420
So your react code is
running here on the server.

109
00:06:06.450 --> 00:06:14.780
So React runs on server using
properties from get serverside props.

110
00:06:14.800 --> 00:06:20.660
This means that the actual page, the HTML
that has the information that you want the

111
00:06:20.690 --> 00:06:24.300
HTML to have on it, is run
and generated on the server.

112
00:06:24.330 --> 00:06:31.540
The server then sends correct HTML to user
based on what this react code rendered.

113
00:06:31.570 --> 00:06:38.540
And then the user loads HTML, then loads
JS to catch up to what server rendered.

114
00:06:38.560 --> 00:06:40.580
This catch up step is a
very important piece.

115
00:06:40.600 --> 00:06:44.380
The catching up is how the
term for its hydration.

116
00:06:44.410 --> 00:06:51.100
Because when your client isn't rendering
the whole page, it's just getting HTML

117
00:06:51.130 --> 00:06:54.140
that's correct initially you
still want things to change.

118
00:06:54.170 --> 00:06:56.260
Like in React, if I have a hook that

119
00:06:56.280 --> 00:07:00.140
renders account and I want it to go up
every time a user clicks, but the server

120
00:07:00.170 --> 00:07:04.500
rendered it as zero, I still want it to
increase when I click it on the user side.

121
00:07:04.520 --> 00:07:06.500
The way that you do that is you take the

122
00:07:06.530 --> 00:07:10.460
HTML that you got from the server and
you hydrate it with the JavaScript.

123
00:07:10.480 --> 00:07:12.340
In order for the hydration to work, it

124
00:07:12.360 --> 00:07:16.380
needs to know exactly what properties
were passed to generate that HTML.

125
00:07:16.400 --> 00:07:20.500
Because effectively what it's doing when
you hydrate in React is it is regenerating

126
00:07:20.530 --> 00:07:26.980
the same HTML in react so it knows, hey,
that element on the page matches this

127
00:07:27.010 --> 00:07:31.620
virtual element in our virtual Dom so it
can do updates from that point forward.

128
00:07:31.650 --> 00:07:34.500
This step, this hydration step takes

129
00:07:34.530 --> 00:07:40.860
roughly as long as the painting step here
where you actually are generating and

130
00:07:40.880 --> 00:07:43.840
running that code to figure out what you
need to fetch and then fetch it and

131
00:07:43.860 --> 00:07:46.620
whatnot that takes just
as long to hydrate.

132
00:07:46.650 --> 00:07:48.960
However, the page already exists and the

133
00:07:48.980 --> 00:07:53.020
user already sees something and they're
probably reading the content of that page

134
00:07:53.040 --> 00:07:55.100
as everything else was
updating behind the scenes.

135
00:07:55.120 --> 00:07:56.220
And by the time they go to click

136
00:07:56.250 --> 00:07:59.820
something, all of the JS is loaded
and hydrated the page properly.

137
00:07:59.850 --> 00:08:01.860
But what about the server side props?

138
00:08:01.890 --> 00:08:04.380
If you have server side props and these

139
00:08:04.410 --> 00:08:09.580
return some data that is used to render
the page, how does the copy of that

140
00:08:09.600 --> 00:08:12.900
rendering path that is running on
the client know about that data?

141
00:08:12.920 --> 00:08:15.540
Well, here's where things
get a little hacky.

142
00:08:15.560 --> 00:08:19.300
Do I have any pages that have get server
side props that I can quickly demo on?

143
00:08:19.330 --> 00:08:21.140
I think ping does.
Cool.

144
00:08:21.170 --> 00:08:24.580
So here's the ping call page for me.

145
00:08:24.600 --> 00:08:29.300
And if I go in here and I actually go into
the HTML, I'll find a script tag somewhere

146
00:08:29.330 --> 00:08:32.780
in here, actually be in the
head, maybe not Next data.

147
00:08:32.810 --> 00:08:37.500
Here we are.
This here, this big old dump in the HTML

148
00:08:37.530 --> 00:08:42.620
here, this is the content of what
gets serverside props returned.

149
00:08:42.650 --> 00:08:48.300
This is dropped in the HTML
because it is necessary for the JavaScript

150
00:08:48.320 --> 00:08:53.140
running on the client to know what was
used to render the page so it can properly

151
00:08:53.170 --> 00:08:56.140
hydrate and synchronize the
client with the server.

152
00:08:56.170 --> 00:09:00.380
This here is an important, arguably hack

153
00:09:00.410 --> 00:09:03.220
that NextJS does in order to
make all of this possible.

154
00:09:03.250 --> 00:09:07.860
So the magic piece here, the thing that
you might not have known about how NextJS

155
00:09:07.890 --> 00:09:12.460
works, is that this page can only be
rendered on the client after the server

156
00:09:12.490 --> 00:09:16.820
because the data needed to render this
page was included on the HTML itself.

157
00:09:16.850 --> 00:09:23.500
So the main benefit here of Next
specifically is that the correct data is

158
00:09:23.530 --> 00:09:28.780
on the page when it renders for the user
the first time, you don't have the blank

159
00:09:28.810 --> 00:09:31.260
pop in that then shows
the correct content.

160
00:09:31.290 --> 00:09:34.100
Like if I go to Twitch right
now, see this loading state?

161
00:09:34.130 --> 00:09:36.760
That loading state is if I slow it on my

162
00:09:36.790 --> 00:09:40.180
network, you can see it even more
exaggerated.

163
00:09:40.200 --> 00:09:42.260
I'll put on Fast Three G and you'll see

164
00:09:42.280 --> 00:09:44.340
there's a state here with
like a loading spinner.

165
00:09:44.360 --> 00:09:46.280
Oh, wow.
It's a disable cache.

166
00:09:46.310 --> 00:09:47.460
And knock that to slow.

167
00:09:47.490 --> 00:09:49.420
You'll see that there's a state there

168
00:09:49.440 --> 00:09:54.020
where the JS hasn't loaded yet
and it just has that top NAV.

169
00:09:54.050 --> 00:09:58.280
Can I easily disable
JavaScript on the page?

170
00:09:58.480 --> 00:09:58.760
Cool.